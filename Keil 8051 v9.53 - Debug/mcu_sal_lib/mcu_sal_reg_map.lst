C51 COMPILER V9.53.0.0   MCU_SAL_REG_MAP                                                   10/14/2019 10:20:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MCU_SAL_REG_MAP
OBJECT MODULE PLACED IN .\mcu_sal_lib\mcu_sal_reg_map.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\Work Project\
                    -SingleChipWorkSpaveNew\C51_UBOOT\mcu_sal_lib\mcu_sal_reg_map.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/Work Project/SingleChipWorkSpaveN
                    -ew/C51_UBOOT/inc;D:/Work Project/SingleChipWorkSpaveNew/C51_UBOOT/mcu_sal_lib;C:/SiliconLabs/SimplicityStudio/v3/develop
                    -er/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1/
                    -inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v3/deve
                    -loper/sdks/si8051/v3//Lib/efm8lb1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1;C:/Silicon
                    -Labs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1/peripheral_driver/inc) PRINT(.\mcu_sal_lib\mcu_sal_reg
                    -_map.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\mcu_sal_lib\mcu_sal_reg_map.OBJ)

line level    source

   1          #include "mcu_sal.h"
   2          
   3          #ifdef MCU_REG_MAP_MODULE_ENABLED
   4          
   5          static REG_MAP_LIST_T *_map_list = NULL;
   6          
   7          void reg_map_list_init(REG_MAP_LIST_T *list)
   8          {
   9   1              uint8_t i = 0;
  10   1      
  11   1              ASSERT(list);
  12   1      
  13   1              _map_list = list;
  14   1      
  15   1              _map_list->map = NULL;
  16   1              _map_list->num = 0;
  17   1      }
  18          
  19          void reg_map_init(REG_MAP_STRUCT_T *reg_map)
  20          {
  21   1              uint8_t i = 0;
  22   1      
  23   1              _map_list->map = reg_map;
  24   1      
  25   1              for(i = 0; i < REG_MAP_NUM; i ++)
  26   1              {
  27   2                      _map_list->map[i].name = NULL;
  28   2                      _map_list->map[i].page = 0;
  29   2                      _map_list->map[i].reg_value = 0;
  30   2              }
  31   1      }
  32          
  33          static MCU_BIT_WIDTH_T reg_get_value_by_name(const char *name)
  34          {
  35   1              uint16_t i = 0;
  36   1      
  37   1              RE_ASSERT(_map_list);
  38   1      
  39   1              for(i = 0; i < _map_list->num; i++)
  40   1              {
  41   2                      if(!strcmp(name,_map_list->map[i].name))
  42   2                      {
  43   3                              return _map_list->map[i].reg_value;
  44   3                      }
  45   2              }
  46   1      
  47   1              return RET_FAILED;
  48   1      }
C51 COMPILER V9.53.0.0   MCU_SAL_REG_MAP                                                   10/14/2019 10:20:41 PAGE 2   

  49          
  50          static void reg_set_value_by_name(const char *name, MCU_BIT_WIDTH_T reg_value)
  51          {
  52   1              uint16_t i = 0;
  53   1      
  54   1              ASSERT(_map_list);
  55   1      
  56   1              for(i = 0; i < _map_list->num; i++)
  57   1              {
  58   2                      if(!strcmp(name,_map_list->map[i].name))
  59   2                      {
  60   3                              _map_list->map[i].reg_value = reg_value;
  61   3                      }
  62   2              }
  63   1      }
  64          
  65          static uint8_t reg_get_page_by_name(const char *name)
  66          {
  67   1              uint16_t i = 0;
  68   1      
  69   1              RE_ASSERT(_map_list);
  70   1      
  71   1              for(i = 0; i < _map_list->num; i++)
  72   1              {
  73   2                      if(!strcmp(name,_map_list->map[i].name))
  74   2                      {
  75   3                              return _map_list->map[i].page;
  76   3                      }
  77   2              }
  78   1      
  79   1              return RET_FAILED;
  80   1      }
  81          
  82          static bool reg_check_map_table_exist(const char *name)
  83          {
  84   1              uint16_t i = 0;
  85   1      
  86   1              RE_ASSERT(_map_list);
  87   1      
  88   1              for(i = 0; i < _map_list->num; i++)
  89   1              {
  90   2                      if(!strcmp(name,_map_list->map[i].name))
  91   2                      {
  92   3                              return true;
  93   3                      }
  94   2              }
  95   1      
  96   1              return false;
  97   1      }
  98          
  99          
 100          MCU_BIT_WIDTH_T reg_read(char* name)
 101          {
 102   1              MCU_BIT_WIDTH_T ret = 0, save_page = 0;
 103   1      
 104   1              SET_PAGE(reg_get_page_by_name(name), save_page);
 105   1      
 106   1              ret = reg_get_value_by_name(name);
 107   1      
 108   1              RESTORE_PAGE(save_page);
 109   1      
 110   1              return ret;
 111   1      }
C51 COMPILER V9.53.0.0   MCU_SAL_REG_MAP                                                   10/14/2019 10:20:41 PAGE 3   

 112          
 113          MCU_BIT_WIDTH_T reg_write(char* name, MCU_BIT_WIDTH_T reg_value)
 114          {
 115   1              MCU_BIT_WIDTH_T ret = 0, save_page = 0;
 116   1      
 117   1              SET_PAGE(reg_get_page_by_name(name), save_page);
 118   1      
 119   1              reg_set_value_by_name(name, reg_value);
 120   1      
 121   1              RESTORE_PAGE(save_page);
 122   1      
 123   1              return ret;
 124   1      }
 125          
 126          static void reg_add_map_table(char *name, MCU_BIT_WIDTH_T reg_value, uint8_t page)
 127          {
 128   1              ASSERT(_map_list);
 129   1      
 130   1              if(_map_list->num < REG_MAP_NUM)
 131   1              {
 132   2                      if(reg_check_map_table_exist(name) == false)
 133   2                      {
 134   3                              _map_list->map[_map_list->num].name        = name;
 135   3                              _map_list->map[_map_list->num].reg_value   = reg_value;
 136   3                              _map_list->map[_map_list->num].page                = page;
 137   3                              _map_list->num ++;
 138   3                      }
 139   2              }
 140   1              else
 141   1              {
 142   2                      lib_log("\r\n reg_add_map_table failed");
 143   2              }
 144   1      }
 145          
 146          void reg_add_show(char *name, MCU_BIT_WIDTH_T reg_value, uint8_t page)
 147          {
 148   1              uint8_t width = sizeof(MCU_BIT_WIDTH_T), i = 0;
 149   1      
 150   1              reg_add_map_table(name, reg_value, page);
 151   1      
 152   1              if(width == 1)
 153   1              {
 154   2                      lib_log("\r\n%s\t = 0x%bx", name, reg_read(name));
 155   2              }
 156   1              else
 157   1              {
 158   2                      lib_log("\r\n%s\t = %x", name, reg_read(name));
 159   2              }
 160   1      }
 161          
 162          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1439    ----
   CONSTANT SIZE    =     53    ----
   XDATA SIZE       =      3      48
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   MCU_SAL_REG_MAP                                                   10/14/2019 10:20:41 PAGE 4   

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
