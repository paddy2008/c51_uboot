C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE LIB_C51_TIMER
OBJECT MODULE PLACED IN .\src\lib_c51_timer.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\Work Project\
                    -SingleChipWorkSpaveNew\C51_UBOOT\src\lib_c51_timer.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY
                    -(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v3/developer/s
                    -dks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1/inc;
                    -C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v3/develope
                    -r/sdks/si8051/v3//Lib/efm8lb1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1) PRINT(.\src\l
                    -ib_c51_timer.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\lib_c51_timer.OBJ)

line level    source

   1          #include "lib_c51_timer.h"
   2          #include "lib_macro.h"
   3          #include "lib_i2c_master.h"
   4          
   5          static TIMER_LSIT_T timer_list;
   6          
   7          /*
   8           * Timer0 is used for i2c master clock source
   9           */
  10          void timer0_init(uint16_t clock)  //the uint of the clock is khz
  11          {
  12   1              uint8_t SFRPAGE_SAVE = SFRPAGE;
  13   1              uint32_t ClockSpeed = clock;
  14   1      
  15   1              SFRPAGE    = 0x0;
  16   1          clock      = SYSCLK/3/4/(ClockSpeed * 1000);  //ClockSpeed * 1000³Ë·¨ÔËËãµÄ½á¹ûÊÇ±£´æµ½ClockSpeedÕâ¸ö±
             -äÁ¿µÄ£¬ËùÒÔÕâÀïÐèÒªÏÈ½«clock¸³ÖµÎªClockSpeed
  17   1      
  18   1          TMOD     |= 0x02;                                            // Sets to 8 bit mode,it is mode2 ,the TL1 is  responsible for counter,TH1 is 
             -responsible for Initial value in mode2
  19   1          CKCON0   |= 0x01;                                            // Use system clock divided by 4,if it is not setted ,default system clock val
             -ue is divided by 12
  20   1          TH0       = -clock;                                          //SMB_FREQUENCY smbus µÄÊ±ÖÓÎª200khz,¸ù¾Ý200KhzËã³öÀ´µÄÓ¦¸ÃÊÇ253,ÒòÎªSCLµÄÊ±
             -ÖÓÆµÂÊÊÇ¶¨Ê±Æ÷Òç³öÂÊµÄ1/3,ËùÒÔ¶¨Ê±Æ÷Òç³öµÄÆµÂÊ±ØÐëÊÇ600khz
  21   1              TL0       = TH0;                                                 // Reload the initial value into TL1
  22   1              IE_ET0    = 0x0;                                 // disable Timer 0 interrupt(TF0),this bit is the µÚ1 bit of IE regis
             -ter,IE page addr is all
  23   1              TCON_TR0  = 0x1;                                                 // Enable Timer0 ,this bit is the µÚ4 bit of TCON register
  24   1          SFRPAGE = SFRPAGE_SAVE;
  25   1      }
  26          
  27          /*
  28           *Timer1 is used for uart0 clock source
  29           */
  30          void timer1_init(uint16_t  counter)
  31          {
  32   1          uint8_t SFRPAGE_SAVE = SFRPAGE;
  33   1              SFRPAGE   = 0x0;
  34   1      
  35   1              TMOD     &= ~0xf0;
  36   1              TMOD     |= 0x20;                               // Sets to 8 bit mode,it is mode2 ,the TL1 is  responsible for counter,TH1 is res
             -ponsible for Initial value in mode2
  37   1              TL1       = counter;                // Initial Value
  38   1              TH1       = TL1;                                        // Reload the initial value into TL1
  39   1              IE_ET1    = 0x0;                    // Disable Timer 1 interrupt(TF1)
  40   1              TCON     |= 0x40;                           // Enable Timer1
  41   1              SFRPAGE = SFRPAGE_SAVE;
  42   1      }
  43          
  44          /*
C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 2   

  45           * Timer2 for use delay and polling
  46           */
  47          static void _timer2_init(void)
  48          {
  49   1          uint8_t SFRPAGE_SAVE = SFRPAGE;
  50   1              SFRPAGE   = 0x0;
  51   1      
  52   1              TMR2CN0 &= ~0x04;                                       //disable timer2
  53   1              TMR2CN0 &= ~0x08;                                       //set timer2 into 16 bit modes
  54   1      
  55   1              CKCON0 &= ~0x30;                                        //Use system clock divided by 12
  56   1              TMR2CN0 &= ~0x03;
  57   1      
  58   1              TMR2RL = -(SYSCLK/12/1000);         // Reload value to be used in Timer2
  59   1              TMR2 = TMR2RL;                      // Init the Timer2 register,Every 1 milliseconds£¨1ms >>> 3*(1/180000
             -00)£© overflow a time
  60   1      
  61   1              TMR2CN0 |= 0x04;                    // Enable Timer2 in auto-reload mode
  62   1              IE_ET2 = 1;                         // Timer2 interrupt enable
  63   1              SFRPAGE = SFRPAGE_SAVE;
  64   1      }
  65          
  66          static void _timer5_init(void)
  67          {
  68   1              uint8_t SFRPAGE_SAVE = SFRPAGE;
  69   1      
  70   1              /*1s    counter:72000000/12*/
  71   1              /*1ms   counter:72000/12*/
  72   1              /*1us   counter:72/12 = 6*/
  73   1      
  74   1              SFRPAGE  = 0x10;
  75   1      
  76   1              TMR5CN0_TF5H = 0;       // Clear Timer5 overflow flag
  77   1      
  78   1              TMR5CN0 &= ~0x04;       //disable timer5
  79   1              TMR5CN0 &= ~0x08;               //set timer5 into 16 bit modes
  80   1      
  81   1              CKCON1  &= ~0x0C;               //set timer5 clock is system clock
  82   1              TMR5CN0 &= ~0x03;       //clock divided by 12
  83   1      
  84   1              TMR5     = 100;         //set timer5 init value
  85   1              TMR5RL   = TMR5;        //set timer5 reload value
  86   1      
  87   1              TMR5CN0 |= 0x04;          // Enable Timer5
  88   1              //EIE2  |= 0x08;          // Timer5 interrupt enable
  89   1      
  90   1              SFRPAGE = SFRPAGE_SAVE;
  91   1      }
  92          
  93          /*
  94           * Èç¹ûÒª¾«È·us¼¶±ðµÄÑÓÊ±£¬ÒªÃ´ÑÓÊ±º¯ÊýÖÐÆäËûÖ¸ÁîµÄÊ±¼äÒ²ÊÇÐèÒª¿¼ÂÇ½øÀ´µÄ
  95           * ¸Ãº¯ÊýµÄ»ã±à´úÂëÈçÏÂ:
  96           *  _timer5_delay_us:
  97          *0000a82b:   MOV     R0, #22H           --->2           ==>4
  98          *0000a82d:   MOV     @R0, 0A7H                  --->2
  99          *100            idata uint16_t counter = 0;
 100          *0000a82f:   CLR     A                                  --->1           ==>7
 101          *0000a830:   INC     R0                                 --->1
 102          *0000a831:   MOV     @R0, A                             --->2
 103          *0000a832:   INC     R0                                 --->1
 104          *0000a833:   MOV     @R0, A                             --->2
 105          *106            if(us == 1)
 106          *0000a834:   MOV     A, R7                              --->2        ==> 13
C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 3   

 107          *0000a835:   XRL     A, #01H                    --->2
 108          *0000a837:   ORL     A, R6                              --->1
 109          *0000a838:   JNZ     0A861H                             --->8
 110          *108                    delay_38_nop();
 111          *0000a83a:   NOP
 112          *0000a83b:   NOP
 113          *0000a83c:   NOP
 114          *0000a83d:   NOP
 115          *0000a83e:   NOP
 116          *0000a83f:   NOP
 117          *0000a840:   NOP
 118          *0000a841:   NOP
 119          *0000a842:   NOP
 120          *0000a843:   NOP
 121          *0000a844:   NOP
 122          *0000a845:   NOP
 123          *0000a846:   NOP
 124          *0000a847:   NOP
 125          *0000a848:   NOP
 126          *0000a849:   NOP
 127          *0000a84a:   NOP
 128          *0000a84b:   NOP
 129          *0000a84c:   NOP
 130          *0000a84d:   NOP
 131          *0000a84e:   NOP
 132          *0000a84f:   NOP
 133          *0000a850:   NOP
 134          *0000a851:   NOP
 135          *0000a852:   NOP
 136          *0000a853:   NOP
 137          *0000a854:   NOP
 138          *0000a855:   NOP
 139          *0000a856:   NOP
 140          *0000a857:   NOP
 141          *0000a858:   NOP
 142          *0000a859:   NOP
 143          *0000a85a:   NOP
 144          *0000a85b:   NOP
 145          *0000a85c:   NOP
 146          *0000a85d:   NOP
 147          *0000a85e:   NOP
 148          *0000a85f:   NOP
 149          *0000a860:   RET
 150          *112            counter = (65535) - us * 6 ;
 151          *0000a861:   MOV     R4, #00H                   --->2   ==>33
 152          *0000a863:   MOV     R5, #06H                   --->2
 153          *0000a865:   LCALL   ?C?IMUL(1A85H)             --->9
 154          *0000a868:   CLR     C                                  --->1
 155          *0000a869:   MOV     A, #0FFH                   --->2
 156          *0000a86b:   SUBB    A, R7                              --->1
 157          *0000a86c:   MOV     R7, A                              --->2
 158          *0000a86d:   MOV     A, #0FFH                   --->2
 159          *0000a86f:   SUBB    A, R6                              --->1
 160          *0000a870:   MOV     R6, A                              --->2
 161          *0000a871:   MOV     R0, #23H                   --->2
 162          *0000a873:   MOV     @R0, A                             --->2
 163          *0000a874:   INC     R0                                 --->1
 164          *0000a875:   MOV     A, R7                              --->2
 165          *0000a876:   MOV     @R0, A                             --->2
 166          *114            SFRPAGE  = 0x10;
 167          *0000a877:   MOV     0A7H, #10H                 --->2     ==>11
 168          *116            IE_ET2 = 0;
 169          *0000a87a:   CLR     IE.5                               --->1
C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 4   

 170          *118            TMR5     = counter;
 171          *0000a87c:   MOV     0D5H, R6                   --->2
 172          *0000a87e:   MOV     0D4H, A                    --->2
 173          *119            TMR5RL   = TMR5;
 174          *0000a880:   MOV     0D3H, 0D5H                 --->2
 175          *0000a883:   MOV     0D2H, 0D4H                 --->2
 176          *121            while(TMR5CN0_TF5H != 0x1);
 177          *0000a886:   JNB     SMBxCN.7, 0A886H   --->9    ==>11
 178          *123            TMR5CN0_TF5H = 0;
 179          *0000a889:   CLR     SMBxCN.7                   --->1
 180          *124            IE_ET2 = 1;
 181          *0000a88b:   SETB    IE.5                               --->1
 182          *126            SFRPAGE = SFRPAGE_SAVE;
 183          *0000a88d:   MOV     R0, #22H                   --->2    ==> 16
 184          *0000a88f:   MOV     A, @R0                             --->2
 185          *0000a890:   MOV     0A7H, A                    --->2
 186          *127       }
 187          *0000a892:   RET                                                --->10
 188           *  Õû¸öº¯ÊýÖ´ÐÐÍê³ÉÐèÒª95¸öNOPÖÜÆÚ£¬ÒòÎª¶¨Ê±Æ÷¼Ó1ÐèÒª12NOPÖÜÆÚ£¬ËùÒÔÉèÖÃ¶¨Ê±Æ÷µÄ³õÖµÊ±ÐèÒª
 189           *  ÔÚÔ­À´µÄ»ù´¡ÉÏÔÙ¼ÓÉÏ95¸öNOPµÄÖÜÆÚ£¬12 * 8 Ô¼µÈÓÚ95¸öNOPÖÜÆÚ
 190           *  ÁíÍâ£¬µ±us = 1Ê±£¬counter = (65535 - us * 6) + 8 µÃµ½µÄ½á¹ûÊÇ´óÓÚ65535µÄ£¬
 191           *  ËùÒÔµ±us = 1Ê±£¬ÐèÒªÌØ±ð´¦Àí£¬ÒòÎªÖ¸Áî
 192           *  idata uint8_t SFRPAGE_SAVE = SFRPAGE;
 193           *      idata uint16_t counter = 0; ¹²Õ¼ÓÃ11¸öNOPÊ±¼ä
 194           *      if(us == 1)Õ¼ÓÃ13¸öNOPÊ±¼ä£¬RETURNÕ¼ÓÃ10¸öNOPÊ±¼ä£¬ÕâÐ©Ö¸Áî¹²Õ¼ÓÃ34¸öNOPÖÜÆÚ£¬
 195           *      1us¹²¼Æ72¸öNOPÖÜÆÚ£¬ËùÒÔ»¹ÐèÒªÖ´ÐÐ38¸öNOPÖ¸Áî
 196           */
 197          void timer5_delay_us(uint16_t us)
 198          {
 199   1              idata uint8_t SFRPAGE_SAVE = SFRPAGE;
 200   1              idata uint16_t counter = 0;
 201   1      
 202   1              /*1s    counter:72000000/12*/
 203   1              /*1ms   counter:72000/12*/
 204   1              /*1us   counter:72/12 = 6*/
 205   1      
 206   1              if(us == 0)
 207   1              {
 208   2                      return;
 209   2              }
 210   1              else if(us == 1)
 211   1              {
 212   2                      delay_38_nop();
 213   2                      return;
 214   2              }
 215   1      
 216   1              counter = (65535 - us * 6) + 12;
 217   1      
 218   1              SFRPAGE  = 0x10;
 219   1      
 220   1              IE_ET2 = 0;              // Disable Timer2 interrupt in order to prevent preemptive CPU resources,ensure 
             -delay is exact
 221   1      
 222   1              TMR5     = counter;     //set timer5 init value
 223   1              TMR5RL   = TMR5;        //set timer5 reload value
 224   1      
 225   1              TMR5CN0_TF5H = 0;                 // Clear Timer5 overflow flag
 226   1              while(TMR5CN0_TF5H != 0x1);   // wait timer5 overflow
 227   1      
 228   1              IE_ET2 = 1;              // Enable Timer2 interrupt
 229   1      
 230   1              SFRPAGE = SFRPAGE_SAVE;
 231   1      }
C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 5   

 232          
 233          /*
 234           * when timer_list.jiffies is setted 0, there must be init timer_list.timer[i]->expires again
 235           */
 236          static void _timer_jiffies_zero_by_isr(uint32_t timeout)
 237          {
 238   1              uint8_t i = 0;
 239   1              //JIFFIES_MAX - (timeout + timer_list.jiffies) > timeout;
 240   1              if(JIFFIES_MAX - timer_list.jiffies < 2 * timeout)
 241   1              {
 242   2                      timer_list.jiffies = 0;
 243   2      
 244   2                      for(i = 0; i < timer_list.num; i++)
 245   2                      {
 246   3                              if(timer_list.timer[i]->function != NULL)
 247   3                              {
 248   4                                      timer_list.timer[i]->expires = timer_list.timer[i]->timeout;
 249   4                              }
 250   3                      }
 251   2              }
 252   1      }
 253          
 254          /*
 255           * when timer_list.jiffies is setted 0, there must be init timer_list.timer[i]->expires again
 256           */
 257          static void _timer_jiffies_zero(uint32_t timeout)
 258          {
 259   1              uint8_t i = 0;
 260   1              //JIFFIES_MAX - (timeout + timer_list.jiffies) > timeout;
 261   1              if(JIFFIES_MAX - timer_list.jiffies < 2 * timeout)
 262   1              {
 263   2                      timer_list.jiffies = 0;
 264   2      
 265   2                      for(i = 0; i < timer_list.num; i++)
 266   2                      {
 267   3                              if(timer_list.timer[i]->function != NULL)
 268   3                                      timer_list.timer[i]->expires = timer_list.timer[i]->timeout; //because timer_list.jiffies = 0, timer_l
             -ist.timer[i]->expires = timer_list.timer[i]->timeout + 0(timer_list.jiffies)
 269   3                      }
 270   2              }
 271   1      }
 272          
 273          /*
 274           * save new tiner struct, there must be expires = jiffts + varible, because when jiffts = 0, expires is al
             -so changed
 275           */
 276          void timer_add(TIMER_STRUCT_T *timer, TIMER_FUNC func, uint32_t timeout)
 277          {
 278   1              if((timer != NULL) && (timer_list.num < TIMER_NUM))
 279   1              {
 280   2                      timer_list.timer[timer_list.num] = timer;
 281   2              }
 282   1              else
 283   1              {
 284   2                      return;
 285   2              }
 286   1      
 287   1              timer_list.timer[timer_list.num]->enable           = 0;        //add new timer default state is disable
 288   1              timer_list.timer[timer_list.num]->timeout_flag = false;
 289   1              timer_list.timer[timer_list.num]->function     = func;
 290   1              timer_list.timer[timer_list.num]->timeout      = timeout;
 291   1      
 292   1              _timer_jiffies_zero(timeout);
C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 6   

 293   1              timer_list.timer[timer_list.num]->expires  = timeout + timer_list.jiffies;
 294   1      
 295   1              timer_list.num ++;
 296   1      }
 297          
 298          /*
 299           * modify the software timer timeout time
 300           */
 301          static void _timer_mod(TIMER_STRUCT_T * timer, uint32_t timeout)
 302          {
 303   1              if(timer == NULL)
 304   1              {
 305   2                      return;
 306   2              }
 307   1      
 308   1              _timer_jiffies_zero_by_isr(timeout);
 309   1              timer->timeout  = timeout;
 310   1              timer->expires  = timeout + timer_list.jiffies;
 311   1      }
 312          
 313          static void _timer_init(void)
 314          {
 315   1              uint8_t i = 0;
 316   1      
 317   1              for(i = 0; i < TIMER_NUM; i++)
 318   1              {
 319   2                      timer_list.timer[i] = NULL;
 320   2              }
 321   1      
 322   1              timer_list.num     = 0;
 323   1              timer_list.jiffies = 0;
 324   1      }
 325          
 326          /*
 327           * start soft timer
 328           */
 329          void timer_start(TIMER_STRUCT_T * timer)
 330          {
 331   1              if(timer != NULL)
 332   1              {
 333   2                      timer->enable = 1;
 334   2              }
 335   1      }
 336          
 337          /*
 338           * stop soft timer
 339           */
 340          void timer_stop(TIMER_STRUCT_T * timer)
 341          {
 342   1              if(timer != NULL)
 343   1              {
 344   2                      timer->enable = 0;
 345   2              }
 346   1      }
 347          
 348          /*max delay 65¡£535s*/
 349          void timer_delay_ms(uint16_t ms)
 350          {
 351   1              uint32_t current_time = 0;
 352   1              uint8_t i = 0, timer_enable_save[TIMER_NUM];
 353   1      
 354   1              //È·±£µ÷ÓÃÕâ¸öÑÓÊ±º¯ÊýµÄÊ±ºò¡£Timer2¿ÉÒÔÕý³£¹¤×÷²¢Õý³£½øÈëÖÐ¶Ï¼ÆÊý,·ñÔò³ÌÐò»áÒ»Ö±µÈ´ýÏÂÈ¥
 355   1              IE_EA = 1;                                              // Enable global interrupts
C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 7   

 356   1          TMR2CN0 |= 0x04;                    // Enable Timer2 in auto-reload mode
 357   1          IE_ET2 = 1;                         // Timer2 interrupt enable
 358   1      
 359   1          _timer_jiffies_zero(ms);
 360   1      
 361   1          //disable all timer_list, in order to prevent current_time = JIFFIES_MAX, timer_list.jiffies is setted
             - 0 right now
 362   1          for(i = 0; (timer_list.timer[i] != NULL) && (i < timer_list.num); i++)
 363   1          {
 364   2              timer_enable_save[i] = timer_list.timer[i]->enable;
 365   2              timer_list.timer[i]->enable = 0;
 366   2          }
 367   1      
 368   1              current_time = timer_list.jiffies;
 369   1          while(timer_list.jiffies <  ms + current_time);
 370   1      
 371   1          //restore all timer_list status
 372   1          for(i = 0; (timer_list.timer[i] != NULL) && (i < timer_list.num); i++)
 373   1          {
 374   2                      timer_list.timer[i]->enable = timer_enable_save[i];
 375   2          }
 376   1      }
 377          
 378          void timer_run(void)
 379          {
 380   1              uint8_t i = 0;
 381   1      
 382   1              for(i = 0; (timer_list.timer[i] != NULL) && (i < timer_list.num); i++)
 383   1              {
 384   2                      if(timer_list.timer[i]->timeout_flag)
 385   2                      {
 386   3                              timer_list.timer[i]->function();
 387   3                              timer_list.timer[i]->timeout_flag = false;
 388   3                      }
 389   2              }
 390   1      }
 391          
 392          void timer_wdt_init(uint8_t interval)
 393          {
 394   1              WDTCN = 0xFF;
 395   1              WDTCN &= ~0x80;  //must be logic 0 when setting this interval
 396   1              WDTCN = interval;
 397   1      }
 398          
 399          void timer_wdt_disable(void)
 400          {
 401   1              uint8_t SFRPAGE_SAVE = SFRPAGE;
 402   1      
 403   1              //disable the watch dog timer
 404   1              SFRPAGE = 0x00;
 405   1              IE_EA = 0;                                //disable global interrupts prevent the write operation is interrupt
 406   1              WDTCN = 0xDE; //First key
 407   1              WDTCN = 0xAD; //Second key
 408   1              SFRPAGE  = SFRPAGE_SAVE;
 409   1      }
 410          
 411          void timer_init()
 412          {
 413   1              timer0_init(i2c_master_get_freq());
 414   1              _timer2_init();
 415   1              _timer_init();
 416   1              _timer5_init();
 417   1      }
C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 8   

 418          
 419          uint32_t timer_get_tick(void)
 420          {
 421   1              return timer_list.jiffies;
 422   1      }
 423          
 424          SI_INTERRUPT_USING(TIMER3_ISR, TIMER3_IRQn, 3)
 425          {
 426   1         SMB0CF  &= ~0x80;                    // Disable SMBus
 427   1         SMB0CF  |= 0x80;                     // Re-enable SMBus
 428   1         TMR3CN0 &= ~0xC0;                    // Clear Timer3 overflow flag
 429   1         SMB0CN0_STA = 0;
 430   1      }
 431          
 432          SI_INTERRUPT (TIMER4_ISR, TIMER4_IRQn)
 433          {
 434   1              SFRPAGE = PG3_PAGE;
 435   1      
 436   1              I2C0CN0 &= ~I2C0CN0_I2C0EN__BMASK;                      // Disable I2C module
 437   1              I2C0CN0 |= I2C0CN0_I2C0EN__ENABLED;                     // Re-enable I2C module
 438   1      
 439   1              SFRPAGE = PG2_PAGE;
 440   1              TMR4CN0 &= ~0xC0;                                                       // Clear Timer4 interrupt-pending flag
 441   1      }
 442          
 443          SI_INTERRUPT_USING(TIMER2_ISR, TIMER2_IRQn, 2)
 444          {
 445   1              uint8_t i = 0;
 446   1      
 447   1              for(i = 0; (timer_list.timer[i] != NULL) && (i < timer_list.num); i++)
 448   1              {
 449   2                      if((timer_list.timer[i]->enable) && (timer_list.timer[i]->expires <= timer_list.jiffies))
 450   2                      {
 451   3                              timer_list.timer[i]->timeout_flag = true;
 452   3                              _timer_mod(timer_list.timer[i], timer_list.timer[i]->timeout); //update timeout time
 453   3                      }
 454   2              }
 455   1      
 456   1              timer_list.jiffies ++;
 457   1      
 458   1              TMR2CN0_TF2H = 0;  // Clear the interrupt flag
 459   1      }
 460          
 461          
 462          
 463          
 464          
 465          
 466          
 467          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2093    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     35      57
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----       3
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.53.0.0   LIB_C51_TIMER                                                     07/25/2019 13:43:48 PAGE 9   

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
