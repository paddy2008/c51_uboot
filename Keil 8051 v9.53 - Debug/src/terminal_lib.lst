C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE TERMINAL_LIB
OBJECT MODULE PLACED IN .\src\terminal_lib.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\Work Project\
                    -SingleChipWorkSpaveNew\C51_UBOOT\src\terminal_lib.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(
                    -3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v3/developer/sd
                    -ks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1/inc;C
                    -:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v3/developer
                    -/sdks/si8051/v3//Lib/efm8lb1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1) PRINT(.\src\te
                    -rminal_lib.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\terminal_lib.OBJ)

line level    source

   1          /*
   2           * terminal_libµÄÖ÷Òª¹¦ÄÜ:
   3           * (1)ÖÕ¶Ë¿â¿ÉÒÔÓ¦ÓÃÓÚ´°¿ÚÍ¨ĞÅ£¬USBÍ¨ĞÅ£¬Íø¿ÚÍ¨ĞÅµÈ
   4           * (2)Ö÷Òª´¦ÀíÖÕ¶ËÊı¾İ£¬°üÀ¨Êı¾İµÄÏÔÊ¾£¬¹â±êÒÆ¶¯£¬Ôö¼õ×Ö·ûµÈ
   5           * (3)Ìá¹©×¢²áÃüÁîµÄAPI
   6           * (4)±£ÁôÀúÊ·ÃüÁî
   7           * */
   8          
   9          
  10          #include <stdio.h>    //for vsprintf
  11          #include <string.h>   //for vsprintf
  12          #include <stdarg.h>   //for va_list ap
  13          #include "Efm8lb12_uart.h"
  14          #include "terminal_lib.h"
  15          #include "com_macro_lib.h"
  16          
  17          static  TERMINAL_STRUCT_T _terminal_struct;
  18          
  19          static void _terminal_del_string(void);
  20          static void _terminal_run_cmd(uint8_t *str);
  21          static void _terminal_read_history_cmd(void);
  22          
  23          static uint8_t _terminal_show_cmd_help(void);
  24          
  25          void terminal_init(void)
  26          {
  27   1              memset((void *)&_terminal_struct, 0, sizeof(TERMINAL_STRUCT_T));
  28   1              _terminal_struct.lock   = 1;
  29   1              _terminal_struct.read   = _terminal_struct.buff;
  30   1              _terminal_struct.write  = _terminal_struct.buff;
  31   1              _terminal_struct.prompt =  PROMPT;
  32   1      
  33   1              terminal_register_cmd("help" ,_terminal_show_cmd_help);
  34   1      }
  35          
  36          static void _terminal_deinit(void)
  37          {
  38   1              memset((void *)_terminal_struct.buff, 0, TERMINAL_BUFF_LEN + 1);
  39   1              _terminal_struct.read   = _terminal_struct.buff;
  40   1              _terminal_struct.write  = _terminal_struct.buff;
  41   1              _terminal_struct.cursor = 0;
  42   1              _terminal_struct.len    = 0;
  43   1              _terminal_struct.skip   = 0;
  44   1              memset((void *)&_terminal_struct.cli.param, 0, sizeof(PARAM_INFO_T));
  45   1      }
  46          
  47          /*
  48           * 1.TERMINAL_BUFFµÄ´óĞ¡ÊÇ100 + 1¸ö×Ö·û£¬×îºóÒ»¸ö¿Õ¼äÓÃÓÚ±£´æ×Ö·û´®½áÊø·û'\0'
  49           * 2.ÎªÁË±ÜÃâÊäÈë×Ö·û³¬¹ı100¸ö×Ö·û£¬º¯ÊıÀïÃæÔö¼ÓÌØÊâ´¦Àí£¬Ö»±£´æÇ°97¸ö¿É»ØÏÔ×Ö·û£¬Ê£ÏÂ3
  50           * ¸ö×Ö·û±£´æ¿ØÖÆ×Ö·û£¬Èç'\b','\r','\n'ºÍ·½Ïò¼ü£¬ÒòÎª·½Ïò¼üÊÇ×éºÏ¼ü£¬°üº¬3¸ö×Ö·û,ËùÒÔÊµ¼Ê¿É»ØÏÔµÄ×Ö·ûÊÇ97¸
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 2   

             -ö
  51           * ¼´ÊäÈë97¸ö×Ö·ûÒÔºó£¬¿ÉÒÔÒÆ¶¯¹â±ê£¬µ«²»ÄÜ¼ÌĞøÊäÈëĞÂµÄ×Ö·û£¬µ±È»É¾³ıÒ»¸ö×Ö·ûÒÔºó£¬ÓÖ¿ÉÒÔÊäÈëÒ»¸öĞÂµÄ×Ö·û
  52           */
  53          static void _terminal_recv_char(uint8_t recv)
  54          {
  55   1              static bool key_flag = false;
  56   1      
  57   1              if(_terminal_struct.write < _terminal_struct.buff + TERMINAL_BUFF_LEN - 3)  //Ö»±£´æÇ°97¸ö×Ö·û£¬×îºóÃæ3¸ö
             -×Ö·ûÖ»ÄÜÊÇ¿ØÖÆ×Ö·ûÈç'\b','\r','\n'ºÍ·½Ïò¼ü£¬ÒòÎª·½Ïò¼üÊÇ×éºÏ¼ü£¬°üº¬3¸ö×Ö·û
  58   1              {
  59   2                      if(*_terminal_struct.write == '\0') //if current position is empty
  60   2                      {
  61   3                              *(_terminal_struct.write) = recv;
  62   3                              _terminal_struct.write ++;
  63   3                      }
  64   2              }
  65   1              else  //×îºóÃæµÄ3¸ö×Ö·û
  66   1              {
  67   2                      if(*_terminal_struct.write == '\0')
  68   2                      {
  69   3                              if((recv == '\b') || (recv == '\r') || (recv == '\n'))
  70   3                              {
  71   4                                      *(_terminal_struct.write) = recv;
  72   4                                      _terminal_struct.write ++;
  73   4                              }
  74   3                              else if(recv == 0x1b)
  75   3                              {
  76   4                                      key_flag = true;
  77   4                              }
  78   3      
  79   3                              if(key_flag)
  80   3                              {
  81   4                                      *(_terminal_struct.write) = recv;
  82   4                                      _terminal_struct.write ++;
  83   4                              }
  84   3      
  85   3                              if(_terminal_struct.write == _terminal_struct.buff + TERMINAL_BUFF_LEN) //Èç¹ûbuffÒÑ¾­Ğ´Âú
  86   3                              {
  87   4                                      key_flag = false;
  88   4                              }
  89   3                      }
  90   2              }
  91   1      }
  92          
  93          void terminal_recv_chars(uint8_t *buff, uint32_t len)
  94          {
  95   1              uint32_t i = 0;
  96   1      
  97   1              for(i = 0; i < len; i++)
  98   1              {
  99   2                      _terminal_recv_char(buff[i]);
 100   2              }
 101   1      }
 102          
 103          /*
 104           * ¶Á×Ö·ûº¯Êı±ØĞëÔö¼ÓÒ»¸öÑÓÊ±²ÎÊı£¬ÒòÎªÏñ·½Ïò¼üÊÇÒ»¸ö×éºÏ¼ü£¬
 105           * ÊÇÈı¸ö×Ö·û×éºÏ¶ø³É£¬¶Áµ½µÚÒ»¸ö×Ö·ûÒÔºó£¬ÓĞÊ±ºò²¢²»ÄÜÀïÃæ
 106           * ¶ÁÈ¡µÚ¶ş¸ö×Ö·û£¬ÒòÎªmcuÄÚ²¿µÄÆµÂÊÊÇÔ¶Ô¶¸ßÓÚuartµÄÍ¨ĞÅËÙÂÊµÄ
 107           */
 108          static uint8_t _terminal_read_char(uint16_t time)
 109          {
 110   1              idata uint8_t  ch = 0;
 111   1      
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 3   

 112   1              if(_terminal_struct.write == _terminal_struct.buff)  //indicate there are no datas
 113   1              {
 114   2                      return ch;
 115   2              }
 116   1      
 117   1              while(time-- != 0)
 118   1              {
 119   2                      if(_terminal_struct.read < _terminal_struct.write) //ÒòÎªÊÇ·ÇÑ­»·buff,ËùÒÔreadÖ¸ÕëÒ»¶¨ÊÇĞ¡ÓÚµÈÓÚwriteÖ¸Õ
             -ë
 120   2                      {
 121   3                              if(*_terminal_struct.read != '\0')  //if not equal NUL(¿Õ×Ö·û)
 122   3                              {
 123   4                                      ch = *_terminal_struct.read;
 124   4                                      _terminal_struct.read ++;
 125   4                                      return ch;
 126   4                              }
 127   3                              else
 128   3                              {
 129   4                                      ch = 0;
 130   4                              }
 131   3                      }
 132   2              }
 133   1              return ch;
 134   1      }
 135          
 136          static void _terminal_putchar(char ch)
 137          {
 138   1              uart_putchar(ch);
 139   1      }
 140          
 141          /*
 142           * ÒòÎªÔÚ³õÊ¼»¯µÄ¹ı³ÌÖĞ²¢ÇÒÈ«¾ÖÖĞ¶ÏÎ´´ò¿ªÖ®Ç°£¬ÓĞ¿ÉÄÜĞèÒª´òÓ¡ĞÅÏ¢
 143           * ÀıÈç¼ì²âSDAºÍSCLµÄµçÆ½×´Ì¬µÈµÈ£¬ËùÒÔÕâÀïÔÚÊä³öĞÅÏ¢Ö®Ç°£¬ÏÈ½«
 144           * È«¾ÖÖĞ¶Ï´ò¿ª
 145           */
 146          static void _terminal_put_string(uint8_t *str)
 147          {
 148   1              while(*str)
 149   1              {
 150   2                      _terminal_putchar(*str);
 151   2                      str++;
 152   2              }
 153   1      }
 154          
 155          /*
 156           * ¸ñÊ½»¯×Ö·û´®µÄÄ¿µÄ:
 157           * É¾³ıÄÇĞ©¿ØÖÆ×Ö·û£¬Ö»°üº¬ÃüÁî×éºÏµÄ¿É»ØÏÔ×Ö·û
 158           */
 159          static void _terminal_format_buff(void)
 160          {
 161   1              uint8_t i = 0, j = 0;
 162   1              uint8_t buff[TERMINAL_BUFF_LEN] = {'\0'};
 163   1              uint8_t len = strlen(_terminal_struct.buff);
 164   1      
 165   1              for(i = 0; _terminal_struct.buff[i] != '\0'; i++)
 166   1              {
 167   2                      if(_terminal_struct.buff[i] == 0x1b && _terminal_struct.buff[i + 1] == 0x5b)  //indicate direction key p
             -ressed
 168   2                      {
 169   3                              i += 3; //skip 3 chars
 170   3      
 171   3                      }
 172   2      
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 4   

 173   2                      if(CHECK_CHAR_VALID(_terminal_struct.buff[i]))
 174   2                      {
 175   3                              buff[j++] = _terminal_struct.buff[i];
 176   3                      }
 177   2              }
 178   1      
 179   1              if(len > 0)
 180   1              {
 181   2                      //CLEAR_BIT(IE,4);   // Disable UART0 interrupts
 182   2                      COM_LOCK_SEM(_terminal_struct.lock);
 183   2                      memcpy(_terminal_struct.buff, buff, TERMINAL_BUFF_LEN);
 184   2                      _terminal_struct.write  = _terminal_struct.buff + j;  //update write pointer
 185   2                      COM_UNLOCK_SEM(_terminal_struct.lock);
 186   2                      //SET_BIT(IE,4);     // Enable UART0 interrupts
 187   2      
 188   2                      _terminal_struct.read   = _terminal_struct.buff + j;  //update read pointer
 189   2              }
 190   1      }
 191          
 192          /*
 193           *×¢ÒâÒ»Ğ©ÌØÊâ×Ö·ûµÄ´¦Àí£¬ÕâĞ©ÌØÊâ×Ö·û²¢²»ĞèÒª±£´æÆğÀ´
 194           */
 195          static void _terminal_handle_direction_key(uint8_t ch)
 196          {
 197   1              switch(ch)
 198   1              {
 199   2                      case 'A': //up direction key, ÊÇ×éºÏ×Ö·û'ESC +¡¾ + A',ASCIIÎª0x1b + 0x5b + 0x41
 200   2                      {
 201   3                              _terminal_read_history_cmd();
 202   3                              break;
 203   3                      }
 204   2                      case 'B': //down direction key£¬ÊÇ×éºÏ×Ö·û'ESC +¡¾ + B',ASCIIÎª0x1b + 0x5b + 0x42
 205   2                      {
 206   3                              _terminal_read_history_cmd();
 207   3                              break;
 208   3                      }
 209   2                      case 'C': //right direciton key£¬ÊÇ×éºÏ×Ö·û'ESC +¡¾ + C',ASCIIÎª0x1b + 0x5b + 0x43
 210   2                      {
 211   3                              _terminal_format_buff();
 212   3                              if(_terminal_struct.cursor < _terminal_struct.len)
 213   3                              {
 214   4                                      _terminal_putchar(0x1b);
 215   4                                      _terminal_putchar(0x5b);
 216   4                                      _terminal_putchar('C');   //ÕâÈı¾äµÄ×÷ÓÃ¾ÍÊÇ¹â±êÓÒÒÆ
 217   4                                      _terminal_struct.cursor ++;
 218   4                              }
 219   3                              break;
 220   3                      }
 221   2                      case 'D': //left direciton key£¬ÊÇ×éºÏ×Ö·û'ESC +¡¾ + D',ASCIIÎª0x1b + 0x5b + 0x44
 222   2                      {
 223   3                              _terminal_format_buff();
 224   3                              if(_terminal_struct.cursor > 0)
 225   3                              {
 226   4                                      _terminal_putchar(0x1b);
 227   4                                      _terminal_putchar(0x5b);
 228   4                                      _terminal_putchar('D'); //ÕâÈı¾äµÄ×÷ÓÃ¾ÍÊÇ¹â±ê×óÒÆ
 229   4                                      _terminal_struct.cursor--;
 230   4                              }
 231   3                              break;
 232   3                      }
 233   2                      default :
 234   2                              break;
 235   2              }
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 5   

 236   1      }
 237          
 238          static void _terminal_cursor_left_move(uint8_t len)
 239          {
 240   1              uint8_t i = 0;
 241   1      
 242   1              for(i = len; i > 0 && (_terminal_struct.cursor > 0); i--)
 243   1              {
 244   2                      _terminal_putchar('\b');
 245   2                      _terminal_struct.cursor --;
 246   2              }
 247   1      }
 248          
 249          /*
 250           * ²åÈë×Ö·ûµÄ´¦ÀíÁ÷³Ì:
 251           * 1.Ê×ÏÈÅĞ¶ÏÊÇÔÚ×Ö·û´®½áÎ²»¹ÊÇÖĞ¼ä
 252           * 2.Èç¹ûÊÇ×Ö·û´®½áÎ²£¬ÄÇÃ´ºÜÈİÒ×£¬Ö±½ÓÊä³ö¾ÍºÃ
 253           * 3.Èç¹ûÊÇ×Ö·û´®ÖĞ¼ä£¬´¦ÀíÁ÷³ÌÈçÏÂ£¬¼ÙÉèµ±Ç°×Ö·û´®ÊÇ12345,ÒªÔÚ23Ö±½Ó²åÈë×Ö·ûa£¬ÄÇÃ´¹â±êÔÚ23Ö®¼ä
 254           * 4.ÄÇÃ´ÏÔÊ¾±äÎª12a345£¬Êµ¼ÊbuffÖĞµÄÊı¾İÎª12345a£¬ÒòÎªÊäÈëaµÄÊ±ºòÊ×ÏÈ½ÓÊÕ²¢´æ·Åµ½ÁËbuffÖĞ
 255           * 5.ÏÈ¿½±´±£Áô¹â±êºóÃæµÄ×Ö·û´®£¬¼´345´æ·Åµ½buff
 256           * 6.È»ºó½«ĞÂ²åÈëµÄ×Ö·û²åÈëµ½¹â±êµ±Ç°Î»ÖÃ
 257           * 7.ÔÙ½«buff¿½±´µ½¹â±êºóµÄÎ»ÖÃ£¬Íê³É¶ÔÔ­bufµÄ¸üĞÂ£¬½ÓÏÂÀ´¾ÍÊÇÏÔÊ¾µÄ´¦ÀíÁË£¬×¢ÒâÊäÈë×Ö·û»òÕß×Ö·û´®ÒÔºó£¬¹â
             -±êÎ»ÖÃ¸Ä±äÁËÒª¼°Ê±¸üĞÂ_uart_struct.cursorµÄÖµ
 258           */
 259          static void _terminal_insert_char(uint8_t ch, uint8_t pos)
 260          {
 261   1              uint8_t buff[TERMINAL_BUFF_LEN] = {'\0'};
 262   1              uint8_t *cur_pos = _terminal_struct.buff + pos;
 263   1      
 264   1              if(ch == SKIP_CHAR && pos == 0x0)
 265   1              {
 266   2                      _terminal_struct.skip = 1;
 267   2              }
 268   1      
 269   1              if(!CHECK_CHAR_VALID(ch) || _terminal_struct.skip)
 270   1              {
 271   2                      return;
 272   2              }
 273   1      
 274   1              if(pos < _terminal_struct.len)  //indicate the cursor at middle
 275   1              {
 276   2                      _terminal_format_buff();
 277   2      
 278   2                      /*¸üĞÂÔ­buff*/
 279   2                      strncpy(buff, cur_pos, _terminal_struct.len - pos);     //±£´æ¹â±êºóÃæµÄ×Ö·û´®
 280   2                      *cur_pos = ch;
 281   2                      cur_pos ++;                                                                             //¼Ó1µÄÄ¿µÄÊÇÎªÁË¸øĞÂ²åÈë×Ö·ûÔ¤Áô¿Õ¼ä
 282   2                      memcpy(cur_pos, buff, strlen(buff) + 1);                        //¸üĞÂÔ­buff£¬¿½±´strlen(buff) + 1¸ö×Ö·ûµÄÄ¿µÄÊÇÎªÁËÔö¼Ó×Ö·
             -û´®Ä©Î²µÄ'\0'×Ö·û,Ê£Óà³¤¶ÈÎªUART0_BUFF_LEN - pos - 1
 283   2      
 284   2                      /*ÏÔÊ¾´¦Àí*/
 285   2                      _terminal_putchar(ch);
 286   2                      _terminal_put_string(buff);
 287   2                      _terminal_struct.cursor = strlen(_terminal_struct.buff);    //¸üĞÂ¹â±êÎ»ÖÃ
 288   2                      _terminal_cursor_left_move(strlen(buff));                               //»Ö¸´¹â±êµ½ÊäÈë×Ö·ûµÄÎ»ÖÃ
 289   2              }
 290   1              else  //indicate the cursor at end
 291   1              {
 292   2                      _terminal_putchar(ch);
 293   2                      _terminal_struct.cursor ++;
 294   2              }
 295   1      
 296   1              _terminal_struct.len ++;
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 6   

 297   1      }
 298          
 299          
 300          /*
 301           * É¾³ı×Ö·ûµÄ´¦ÀíÁ÷³Ì
 302           * Óë²åÈë×Ö·ûµÄ´¦ÀíË¼Â·Ò»Ñù£¬ÏÈÉ¾³ıÖ¸¶¨×Ö·û£¬È»ºó×Ö·û´®Æ´½Ó
 303           * 123456789,¼ÙÉèµ±Ç°¹â±êÎ»ÓÚ56Ö®¼ä
 304           * 1234 6789,Ö´ĞĞÓï¾ä_terminal_put_string("\b \b");ºóµÄĞ§¹û£¬²¢ÇÒµ±Ç°¹â±êÔÚ4ºóÃæ£¬¶ø²»ÊÇ5ºóÃæ
 305           * 123467899,Ö´ĞĞÓï¾ä_terminal_put_string(str);ºóµÄĞ§¹û,²¢ÇÒµ±Ç°¹â±êÔÚÁ½¸ö9Ö®¼ä
 306           * 12346789, Ö´ĞĞÓï¾ä_terminal_put_string(" \b");ºóµÄĞ§¹û,µ±Ç°¹â±êÔÚ9ºóÃæ
 307           */
 308          static void _terminal_delete_char(uint8_t pos)
 309          {
 310   1              uint8_t buff[TERMINAL_BUFF_LEN] = {'\0'};
 311   1              uint8_t *cur_pos = _terminal_struct.buff + pos;
 312   1      
 313   1              if(pos > 0)
 314   1              {
 315   2                      _terminal_format_buff();
 316   2                      /*¸üĞÂÔ­buff*/
 317   2                      strcpy(buff, cur_pos);          //±£´æ¹â±êºóÃæµÄ×Ö·û´®
 318   2                      cur_pos --;                             //¼õ1µÄÄ¿µÄÊÇÎªÁË¸²¸Ç±»É¾³ıµÄÄÇ¸ö×Ö·û
 319   2                      //CLEAR_BIT(IE,4);   // Disable UART0 interrupts
 320   2                      COM_LOCK_SEM(_terminal_struct.lock);
 321   2                      memcpy(cur_pos, buff, strlen(buff) + 1);        //¸üĞÂÔ­buff£¬¿½±´strlen(buff) + 1¸ö×Ö·ûµÄÄ¿µÄÊÇÎªÁËÔö¼Ó×Ö·û´
             -®Ä©Î²µÄ'\0'×Ö·û,Ê£Óà³¤¶ÈÎªUART0_BUFF_LEN - pos + 1
 322   2                      _terminal_struct.write --;      //ÒòÎªÉ¾³ıÁËÒ»¸ö×Ö·û£¬ËùÒÔwriteÖ¸ÕëĞèÒª¼õ1
 323   2                      //SET_BIT(IE,4);   // Enable UART0 interrupts
 324   2                      COM_UNLOCK_SEM(_terminal_struct.lock);
 325   2      
 326   2                      _terminal_struct.read -- ;  //ÒòÎªÉ¾³ıÁËÒ»¸ö×Ö·û£¬ËùÒÔreadÖ¸ÕëĞèÒª¼õ1
 327   2                      _terminal_struct.len = strlen(_terminal_struct.buff);
 328   2      
 329   2                      /*ÏÔÊ¾´¦Àí*/
 330   2                      _terminal_put_string("\b \b");   //´òÓ¡'\b',±íÊ¾¹â±êÇ°ÒÆÒ»¸ö×Ö·û£¬È»ºó´òÓ¡¿Õ¸ñ£¬É¾³ı¹â±êºóµÄ×Ö·û£¬ÔÙ´òÓ¡
             -'\b', ¹â±êÔÙ´ÎÇ°ÒÆÒ»¸ö×Ö·û£¬×ÛºÏĞ§¹û¾ÍÊÇÉ¾³ı×Ö·ûºó£¬¹â±êÎ»ÖÃ²»±ä
 331   2                      _terminal_put_string(buff);      //¹â±êºóÃæµÄ×Ö·ûÍ¬²½Ç°ÒÆ£¬¹â±êÒÑ¾­ÒÆµ½ÁË×Ö·û´®µÄµ¹ÊıµÚ¶şÎ»
 332   2                      _terminal_put_string(" \b");      //¹â±êÔÚ×Ö·û´®µÄ×îºóÃæ
 333   2                      _terminal_struct.cursor = _terminal_struct.len;
 334   2                      _terminal_cursor_left_move(strlen(buff));  //½«¹â±ê»Ö¸´µ½É¾³ı×Ö·ûµÄÎ»ÖÃ
 335   2              }
 336   1      }
 337          
 338          static void _terminal_del_string(void)
 339          {
 340   1              uint8_t i = 0;
 341   1      
 342   1              _terminal_format_buff();
 343   1      
 344   1              //½«¹â±êÒÆ¶¯µ½×Ö·û´®µÄ×îºóÃæ
 345   1              for(i = 0; _terminal_struct.cursor < _terminal_struct.len; i ++)
 346   1              {
 347   2                      _terminal_putchar(0x1b);
 348   2                      _terminal_putchar(0x5b);
 349   2                      _terminal_putchar('C');   //ÕâÈı¾äµÄ×÷ÓÃ¾ÍÊÇ¹â±êÓÒÒÆ
 350   2                      _terminal_struct.cursor ++;
 351   2              }
 352   1      
 353   1              for(i = 0; i < _terminal_struct.len; i++)
 354   1              {
 355   2                      _terminal_put_string("\b \b");   //´òÓ¡'\b',±íÊ¾¹â±êÇ°ÒÆÒ»¸ö×Ö·û£¬È»ºó´òÓ¡¿Õ¸ñ£¬É¾³ı¹â±êºóµÄ×Ö·û£¬ÔÙ´òÓ¡
             -'\b', ¹â±êÔÙ´ÎÇ°ÒÆÒ»¸ö×Ö·û£¬×ÛºÏĞ§¹û¾ÍÊÇÉ¾³ı×Ö·ûºó£¬¹â±êÎ»ÖÃ²»±ä
 356   2              }
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 7   

 357   1      
 358   1              _terminal_deinit();
 359   1      }
 360          
 361          /*
 362           * UARTµÄ´¦ÀíÁ÷³Ì
 363           * 1.UARTÖ»¸ºÔğ½ÓÊÕÊı¾İ£¬²¢½«Êı¾İ±£´æµ½UART_BUFF,ÕâÑù´¦ÀíµÄÓÅÊÆÊÇÈ«Ë«¹¤£¬Ìá¸ß´®¿ÚµÄÏìÓ¦ËÙ¶È£¬Èç¹û½ÓÊÕÒ»¸ö×
             -Ö·ûÏÔÊ¾Ò»¸ö×Ö·û£¬´¦ÀíËÙ¶È»áÂıºÜ¶à
 364           * 2.CMD_BUFFµÄÊı¾İÊÇ´ÓUART_BUFFÖĞ¶ÁÈ¡µÄ£¬ÆäÊµÊÇ¿ÉÒÔ¹²ÓÃµÄ£¬ÎÒÃÇÕâÀï¾Í²ÉÈ¡¹²ÓÃµÄ²ßÂÔ£¬½ÚÔ¼RAM
 365           * 3.Èç¹ûÃ¿ÊäÈëÒ»¸ö×Ö·û£¬¾ÍÁ¢¼´´ÓUART_BUFF¶ÁÈ¡µ½CMD_BUFF,ÄÇÃ´É¾³ı×Ö·ûµÄÊ±ºò£¬Á½·İÊı¾İ¶¼ÒªÉ¾³ı£¬ËùÒÔÓ¦¸ÃµÈÊ
             -äÈë½áÊøÒÔºó£¬²Å½«Êı¾İ¸üĞÂµ½CMD_BUFF
 366           * 4.Ğ´×Ö·ûºÍ¶Á×Ö·û»ù±¾Í¬²½£¬Ä¿µÄ¾ÍÊÇÎªÁË»ØÏÔ
 367           * 5.¶¨ÒåÒ»¸ö·ÇÑ­»·UART_BUFF,µ±Ğ´ÂúµÄÊ±ºò£¬½«Ğ´Ö¸ÕëÖØĞÂÖ¸ÏòUART_BUFFµÄÆğÊ¼Î»ÖÃ£¬ÒòÎªÊÇ·ÇÑ­»·buff£¬ËùÒÔread
             -Ö¸ÕëÓÀÔ¶Ğ¡ÓÚµÈÓÚwriteÖ¸Õë
 368           * */
 369          void terminal_event_handle(void)
 370          {
 371   1              idata char ch;
 372   1      
 373   1              while((ch = _terminal_read_char(1)) != 0)
 374   1              {
 375   2                      if(ch == '\n' || ch == '\r') //°´ÏÂ»Ø³µ»òÕß»»ĞĞ·û,±íÊ¾ÊäÈë½áÊø
 376   2                      {
 377   3                              //action handle in here
 378   3                              _terminal_format_buff();
 379   3                              _terminal_run_cmd(_terminal_struct.buff);
 380   3                              _terminal_deinit();
 381   3                              _terminal_put_string(_terminal_struct.prompt);
 382   3                      }
 383   2                      else if(ch == '\b')
 384   2                      {
 385   3                              _terminal_delete_char(_terminal_struct.cursor);
 386   3                      }
 387   2                      else if(ch == 0x1b && _terminal_read_char(0xffff) == 0x5b) //·½Ïò¼üÊÇ×éºÏ×Ö·û'ESC +¡¾ + A',ASCIIÎª0x1b +
             - 0x5b + 0x41
 388   2                      {
 389   3                              _terminal_handle_direction_key(_terminal_read_char(0xffff));
 390   3                      }
 391   2                      else //´¦ÀíÊ£ÓàÆäËûµÄ×Ö·û£¬¼´0x21 ~ 0x7E
 392   2                      {
 393   3                              _terminal_insert_char(ch, _terminal_struct.cursor);
 394   3                      }
 395   2              }
 396   1      }
 397          
 398          /***********************************************TERMINAL CLI HANDLE***************************************
             -***/
 399          
 400          static void _terminal_format_cmd(uint8_t *str)
 401          {
 402   1              uint8_t  *str_sect = NULL, buff[TERMINAL_BUFF_LEN] = {0};
 403   1      
 404   1              if((str == NULL) || (*str == '\0'))
 405   1              {
 406   2                      return;
 407   2              }
 408   1      
 409   1              strcpy(buff, str);                      //±ØĞë×¢Òâ£¬strtokº¯Êı»áĞŞ¸ÄÔ­×Ö·û´®£¬ËùÒÔ±ØĞë½«×Ö·û´®¿½±´Ò»·İ£¬µ¥¶À´¦Àí£¬È·±£Ô­×Ö·
             -û´®²»±»ĞŞ¸Ä
 410   1              str_sect = strtok(buff," ");
 411   1              while(str_sect)
 412   1              {
 413   2                      strcpy(_terminal_struct.cli.param.argv[_terminal_struct.cli.param.argc ++], str_sect);
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 8   

 414   2                      str_sect = strtok(NULL," ");
 415   2              };
 416   1      }
 417          
 418          /*
 419          static bool _terminal_find_history_cmd(uint8_t *str)
 420          {
 421                  uint8_t i = 0;
 422          
 423                  if((str == NULL) || (*str == '\0'))
 424                  {
 425                          return false;
 426                  }
 427          
 428                  for (i = 0; i < _terminal_struct.cli.history.write; i++)
 429                  {
 430                          if(!strcmp(_terminal_struct.cli.history.buff[i], str))
 431                          {
 432                                  return true;
 433                          }
 434                  }
 435          
 436                  return false;
 437          }
 438          */
 439          
 440          static void _terminal_save_history_cmd(uint8_t *str)
 441          {
 442   1              /*
 443   1              if(_terminal_find_history_cmd(str))
 444   1              {
 445   1                      return;
 446   1              }
 447   1              else
 448   1              */
 449   1              {
 450   2                      memset(_terminal_struct.cli.history.buff[_terminal_struct.cli.history.write], 0, TERMINAL_BUFF_LEN);
 451   2                      strcpy(_terminal_struct.cli.history.buff[_terminal_struct.cli.history.write],str);
 452   2                      _terminal_struct.cli.history.write ++;
 453   2                      _terminal_struct.cli.history.read = _terminal_struct.cli.history.write;
 454   2      
 455   2                      if(_terminal_struct.cli.history.write >= CLI_HISTORY_CMD_NUM)
 456   2                      {
 457   3                              _terminal_struct.cli.history.full = true;
 458   3                              _terminal_struct.cli.history.write = 0;
 459   3                      }
 460   2              }
 461   1      }
 462          
 463          /*
 464           * ÒòÎª×¢²áÃüÁîµÄ¸ñÊ½ÊÇ±äÁ¿ÒÔ×Ö·û'&'¿ªÍ·£¬³£Á¿²ÎÊıÒÔ×Ö·û'#'¿ªÍ·,read|write»òÕßset|getÃüÁî×éºÏµ½Ò»¸ö×Ó´®,Õâ
             -¸ö×Ó´®Ö®¼äÓÃ×Ö·û'|'·Ö¸ô¿ª
 465           * ÀıÈç:
 466           * [opr|opw] &baseAddr &OffAddr #ParmNum(0~0xff),Êµ¼ÊÊäÈëµÄÃüÁî¿ÉÄÜÊÇopr 0xa0 0x0,opw 0x16 0x2 0x10µÈ
 467           * [get|set] rx_los mode #[0|1],Êµ¼ÊÊäÈëµÄÃüÁî¿ÉÄÜÊÇget rx_los mode,set rx_los mode 0
 468           *
 469           */
 470          static uint8_t _terminal_special_char_match(uint8_t *str)
 471          {
 472   1              uint8_t *p = str,i = 0, ret = 0, buff[CLI_STR_SECTION_LEN] = {0};
 473   1      
 474   1              if((str == NULL) || (*str == '\0'))
 475   1              {
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 9   

 476   2                      return NONE_TYPE;
 477   2              }
 478   1      
 479   1              for(; *p != '\0'; p++)
 480   1              {
 481   2                      if(*p == '&')
 482   2                      {
 483   3                              return VARIABLE_STR__TYPE;
 484   3                      }
 485   2                      else if(*p == '#')
 486   2                      {
 487   3                              return PARAM_STR__TYPE;
 488   3                      }
 489   2                      else if((*p == '[') || (*p == ']') || (*p == '|'))
 490   2                      {
 491   3                              return MULTI_PARAMS_STR_TYPE;
 492   3                      }
 493   2              }
 494   1      
 495   1              return NONE_TYPE;
 496   1      }
 497          
 498          
 499          /*
 500           * ÊäÈëµÄÃüÁîĞèÒª¸ù¾İ×¢²áµÄÃüÁîĞÅÏ¢Æ¥Åä£¬»ù±¾Ë¼ÏëÈçÏÂ:
 501           * 1.ÊäÈëµÄÃüÁî±È½Ï¼ò½à£¬ÒÔÒ»¸ö¿Õ¸ñ×Ö·û½«Ã¿¸ö×Ö·û´®¶Î·Ö¿ª£¬µ±½ÓÊÕÊäÈëµÄ×Ö·û´®ÒÔºó£¬ÏÈ¸ñÊ½»¯£¬½«Æä·Ö¶Î±£´æÔ
             -Ú_uart_struct.cli.param.argvÖĞ
 502           * 2.±éÀú×¢²áµÄ×Ö·û´®£¬È»ºó¿ªÊ¼"·Ö½â"×¢²áµÄ×Ö·û´®£¬Ò»±ß·Ö½â£¬Ò»±ß±È½Ï£¬ÏÈÒÔ¿Õ¸ñ×Ö·û·Ö½â£¬Èç¹û²»Æ¥Åä£¬ÅĞ¶ÏÊ
             -Ç·ñÊÇ±íÊ¾ÌØÊâ²ÎÊıµÄ×Ö·û´®£¬Èç¹ûÊÇÒÔ×Ö·û&ºÍ×Ö·û#¿ªÍ·µÄ×Ö·û´®£¬Ö±½ÓÌø¹ı²»Æ¥Åä
 503           * 3.Èç¹û²»ÊÇÒÔ×Ö·û&ºÍ×Ö·û#¿ªÍ·µÄ×Ö·û´®£¬ÅĞ¶ÏÊÇ²»ÊÇÃüÁî×éºÏ×Ö·û´®¶Î£¬ÒòÎªÕâÀïÊ¹ÓÃÁË¿âº¯Êıstrstrº¯ÊıÀ´Æ¥Åä£
             -¬ËùÒÔµ±Á½¸öÃüÁî°üº¬ÏàÍ¬µÄ×Ö·û´®µÄÊ±ºò£¬×Ö·û´®³¤µÄÃüÁî±ØĞëÔÚ×Ö·û´®¶ÎµÄÃüÁîºóÃæ
 504           * 4.ÀıÈç[opr|opw] &baseAddr &OffAddr #ParmNum(0~0xff)±ØĞëÔÚ[oprt|opwt] &baseAddr &OffAddr #ParmNum(0~0xff
             -)Ç°Ãæ×¢²á
 505           */
 506          static bool _terminal_string_match(uint8_t *src)
 507          {
 508   1              uint8_t  *str_sect = NULL, buff[TERMINAL_BUFF_LEN] = {0}, i = 0;
 509   1      
 510   1              if((src == NULL) || (*src == '\0'))
 511   1              {
 512   2                      return false;
 513   2              }
 514   1      
 515   1              strcpy(buff, src);
 516   1      
 517   1              //_terminal_put_string("-00-");
 518   1              //_terminal_put_string(src);
 519   1              str_sect = strtok(buff," ");
 520   1              //_terminal_put_string("-11-");
 521   1              //_terminal_put_string(str_sect);
 522   1      
 523   1              /*
 524   1              for(i = 0; i < _terminal_struct.cli.param.argc; i++)
 525   1              {
 526   1                      terminal_printf("-aa%bu-", i);
 527   1                      _terminal_put_string(_terminal_struct.cli.param.argv[i]);
 528   1              }
 529   1              */
 530   1      
 531   1              //_terminal_put_string("-66-");
 532   1              while(str_sect)
 533   1              {
 534   2                      //_terminal_put_string("-77-");
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 10  

 535   2                      if(!strcmp(str_sect, _terminal_struct.cli.param.argv[i]))  //if match success
 536   2                      {
 537   3                              str_sect = strtok(NULL," ");  //»ñÈ¡ÏÂÒ»¸ö×Ö·û´®¶Î
 538   3                              i ++;
 539   3                              //_terminal_put_string("-22-");
 540   3                              //_terminal_put_string(str_sect);
 541   3                      }
 542   2                      else
 543   2                      {
 544   3                              uint8_t type = _terminal_special_char_match(str_sect);
 545   3      
 546   3                              //_terminal_put_string("-88-");
 547   3                              //terminal_printf("\r\n%type = %bu",type);
 548   3      
 549   3                              if(type == MULTI_PARAMS_STR_TYPE)
 550   3                              {
 551   4                                      if(strstr(str_sect,_terminal_struct.cli.param.argv[i]))  //if in multi params string include target st
             -r , indicate match success
 552   4                                      {
 553   5                                              str_sect = strtok(NULL," ");
 554   5                                              i ++;
 555   5                                              //_terminal_put_string("-55-");
 556   5                                              //_terminal_put_string(str_sect);
 557   5                                      }
 558   4                                      else
 559   4                                      {
 560   5                                              //_terminal_put_string("-99-");
 561   5                                              //_terminal_put_string(str_sect);
 562   5                                              return false;
 563   5                                      }
 564   4                              }
 565   3                              else if((type == VARIABLE_STR__TYPE) || (type == PARAM_STR__TYPE)) //Èç¹ûÓĞÌØÊâ×Ö·û&»òÕß#±íÊ¾Æ¥Åä³É¹¦
 566   3                              {
 567   4                                      str_sect = strtok(NULL," ");
 568   4                                      i ++;
 569   4                                      //_terminal_put_string("-33-");
 570   4                                      //_terminal_put_string(str_sect);
 571   4                              }
 572   3                              else
 573   3                              {
 574   4                                      //_terminal_put_string("-44-");
 575   4                                      //_terminal_put_string(str_sect);
 576   4                                      return false;
 577   4                              }
 578   3                      }
 579   2              }
 580   1              //_terminal_put_string("-99-");
 581   1              //_terminal_put_string(src);
 582   1              return true;
 583   1      }
 584          
 585          static REGISTER_CMD_T* _terminal_match_cmd()
 586          {
 587   1              REGISTER_CMD_T *command = (REGISTER_CMD_T *)&_terminal_struct.cli.cmd.command[0];
 588   1              uint8_t i = 0;
 589   1      
 590   1              for(i = 0; i < _terminal_struct.cli.cmd.num; i++)
 591   1              {
 592   2                      if(_terminal_string_match(command->name))
 593   2                      {
 594   3                              return command;
 595   3                      }
 596   2                      command ++;
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 11  

 597   2              }
 598   1      
 599   1              return NULL;
 600   1      }
 601          
 602          static void _terminal_run_cmd(uint8_t *str)
 603          {
 604   1              RETURN_VALUE_TYPE ret = RET_OK;
 605   1              REGISTER_CMD_T *command = NULL;
 606   1              uint8_t len = 0;
 607   1      
 608   1              //_terminal_put_string("111");
 609   1              //terminal_printf("ch = %bu", str[0]);
 610   1              //_terminal_put_string("222");
 611   1      
 612   1              if((str == NULL) || (*str == '\0'))
 613   1              {
 614   2                      return;
 615   2              }
 616   1      
 617   1      
 618   1              _terminal_save_history_cmd(str);
 619   1              _terminal_format_cmd(str);
 620   1      
 621   1              command = _terminal_match_cmd();
 622   1      
 623   1              if(command != NULL)
 624   1              {
 625   2                      ret = command->func(&_terminal_struct.cli.param);
 626   2                      if(RET_OK != ret)
 627   2                      {
 628   3                              if(RET_NO_PERMISSION == ret)
 629   3                              {
 630   4                                      _terminal_put_string("\r\nPlease write passward '0x8f 0x9e 0xad 0xec' at first");
 631   4                              }
 632   3      
 633   3                              _terminal_put_string("\r\n---ATECMDRESULT--- FAIL");
 634   3                      }
 635   2                      else
 636   2                      {
 637   3                              _terminal_put_string("\r\n---ATECMDRESULT--- OK");
 638   3                      }
 639   2              }
 640   1              else
 641   1              {
 642   2                      _terminal_put_string("\r\nCommand not recognised.  Enter 'help' to view a list of available commands.");
 643   2              }
 644   1      
 645   1      }
 646          
 647          static uint8_t _terminal_show_cmd_help()
 648          {
 649   1              REGISTER_CMD_T *command = (REGISTER_CMD_T *)&_terminal_struct.cli.cmd.command[0];
 650   1              uint8_t i = 0;
 651   1      
 652   1              for(i = 0; i < _terminal_struct.cli.cmd.num; i++)
 653   1              {
 654   2                      _terminal_put_string("\r\n        ");
 655   2                      _terminal_put_string(command->name);
 656   2                      command ++;
 657   2              }
 658   1              return RET_OK;
 659   1      }
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 12  

 660          
 661          void  terminal_register_cmd(uint8_t *name,FUNCTION func)   //×¢²áÃüÁî´¦Àíº¯Êı
 662          {
 663   1              if((name == NULL) || (func == NULL))
 664   1              {
 665   2                      return;
 666   2              }
 667   1      
 668   1              if(_terminal_struct.cli.cmd.num < CLI_CMD_NUM)
 669   1              {
 670   2                      _terminal_struct.cli.cmd.command[_terminal_struct.cli.cmd.num].name   = name;
 671   2                      _terminal_struct.cli.cmd.command[_terminal_struct.cli.cmd.num].func       = func;
 672   2                      _terminal_struct.cli.cmd.num ++;
 673   2              }
 674   1      }
 675          
 676          static void _terminal_read_history_cmd(void)
 677          {
 678   1              if(_terminal_struct.cli.history.read > 0)
 679   1              {
 680   2                      _terminal_del_string();
 681   2                      _terminal_struct.cli.history.read --;
 682   2                      _terminal_put_string(_terminal_struct.cli.history.buff[_terminal_struct.cli.history.read]);
 683   2      
 684   2                      //CLEAR_BIT(IE,4);   // Disable UART0 interrupts;
 685   2                      COM_LOCK_SEM(_terminal_struct.lock);
 686   2                      memcpy(_terminal_struct.buff,_terminal_struct.cli.history.buff[_terminal_struct.cli.history.read],strlen
             -(_terminal_struct.cli.history.buff[_terminal_struct.cli.history.read]));
 687   2                      _terminal_struct.write  = _terminal_struct.buff + strlen(_terminal_struct.buff);  //update write pointer
 688   2                      //SET_BIT(IE,4);     // Enable UART0 interrupts
 689   2                      COM_UNLOCK_SEM(_terminal_struct.lock);
 690   2      
 691   2                      _terminal_struct.read   = _terminal_struct.buff + strlen(_terminal_struct.buff);  //update read pointer
 692   2                      _terminal_struct.len    = strlen(_terminal_struct.buff);
 693   2                      _terminal_struct.cursor = strlen(_terminal_struct.buff);
 694   2      
 695   2                      if(_terminal_struct.cli.history.read == 0x0)
 696   2                      {
 697   3                              if( _terminal_struct.cli.history.full)
 698   3                              {
 699   4                                      _terminal_struct.cli.history.read = CLI_HISTORY_CMD_NUM;
 700   4                              }
 701   3                              else
 702   3                              {
 703   4                                      _terminal_struct.cli.history.read = _terminal_struct.cli.history.write;
 704   4                              }
 705   3                      }
 706   2              }
 707   1      }
 708          
 709          uint8_t terminal_get_lock_status()
 710          {
 711   1              return _terminal_struct.lock;
 712   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3309    ----
   CONSTANT SIZE    =    745    ----
   XDATA SIZE       =   1619     593
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----       2
C51 COMPILER V9.53.0.0   TERMINAL_LIB                                                      07/24/2019 17:21:55 PAGE 13  

   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
