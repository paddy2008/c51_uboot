C51 COMPILER V9.53.0.0   MCU_SAL_DBG_CMD                                                   10/09/2019 13:50:29 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MCU_SAL_DBG_CMD
OBJECT MODULE PLACED IN .\mcu_sal_lib\mcu_sal_dbg_cmd.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\Work Project\
                    -SingleChipWorkSpaveNew\C51_UBOOT\mcu_sal_lib\mcu_sal_dbg_cmd.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:/Work Project/SingleChipWorkSpave
                    -New/C51_UBOOT/inc;D:/Work Project/SingleChipWorkSpaveNew/C51_UBOOT/mcu_sal_lib;C:/SiliconLabs/SimplicityStudio/v3/develo
                    -per/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1
                    -;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1/inc;C:/SiliconLabs/SimplicityStudio/v3/deve
                    -loper/sdks/si8051/v3//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8LB1/periph
                    -eral_driver/inc) REGFILE(C51_UBOOT.ORC) PRINT(.\mcu_sal_lib\mcu_sal_dbg_cmd.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJE
                    -CT(.\mcu_sal_lib\mcu_sal_dbg_cmd.OBJ)

line level    source

   1          #include "mcu_sal.h"
   2          
   3          #ifdef MCU_DBG_CMD_MODULE_ENABLED
   4          
   5          /*
   6           * ¸Ãº¯ÊýÓ¦ÓÃÓÚi2cÖ÷Éè±¸¶Ë,ÓÃÓÚi2cÖ÷Éè±¸Ïòi2c´ÓÉè±¸ÇëÇóÃüÁîºó»ñÈ¡ÇëÇóÃüÁîµÄ×´Ì¬ÐÅÏ¢£¬µ½µ×ÊÇÖ´ÐÐ³É¹¦£¬»¹ÊÇÊ
             -§°Ü
   7           */
   8          static bool dbg_cmd_get_status()
   9          {
  10   1              uint8_t  result = 0;
  11   1              uint16_t counter = 0;
  12   1      
  13   1              do
  14   1              {
  15   2                      i2c_master_read_byte(I2C_DEVICE_ADDR, DEBUG_CMD_START_ADDR, &result);
  16   2                      counter ++;
  17   2                      timer_delay_ms(2 * counter);
  18   2                      if(counter >= 100)  //delay 10s
  19   2                      {
  20   3                              lib_log("\r\n dbg_cmd_get_status failed");
  21   3                              return false;
  22   3                      }
  23   2      
  24   2              }while(result != RET_OK && result != RET_FAILED);
  25   1      
  26   1              i2c_master_write_byte(I2C_DEVICE_ADDR, DEBUG_CMD_START_ADDR, CMD_TYPE_IDEL);  //set dbg_cmd_status idle
  27   1      
  28   1              if(result == RET_FAILED)
  29   1              {
  30   2                      return false;
  31   2              }
  32   1              else
  33   1              {
  34   2                      return true;
  35   2              }
  36   1      }
  37          
  38          /*
  39           * ¸Ãº¯ÊýÓ¦ÓÃÓÚi2cÖ÷Éè±¸¶Ë,ÓÃÓÚi2cÖ÷Éè±¸Ïòi2c´ÓÉè±¸ÇëÇóÃüÁî
  40           */
  41          uint8_t dbg_cmd_conf(DEBUG_CMD_TYPE cmd)
  42          {
  43   1              uint8_t ret = RET_OK;
  44   1      
  45   1              ret = i2c_master_write_byte(I2C_DEVICE_ADDR, DEBUG_CMD_START_ADDR, cmd);
  46   1      
  47   1              if(dbg_cmd_get_status() == false)
C51 COMPILER V9.53.0.0   MCU_SAL_DBG_CMD                                                   10/09/2019 13:50:29 PAGE 2   

  48   1              {
  49   2                      lib_log("\r\n dbg_cmd_conf failed");
  50   2                      ret = RET_FAILED;
  51   2              }
  52   1      
  53   1              return ret;
  54   1      }
  55          
  56          
  57          /*
  58           * ¸Ãº¯ÊýÓ¦ÓÃÓÚi2cÖ÷Éè±¸¶Ë,ÓÃÓÚi2cÖ÷Éè±¸·ÃÎÊi2c´ÓÉè±¸ÄÚ²¿µÄi2c´ÓÉè±¸
  59           */
  60          uint8_t i2c_pass_through_read(uint8_t dev_addr, uint8_t page, uint16_t offset_addr, uint8_t *value, uint8_
             -t len)
  61          {
  62   1              CONFIG_STRUCT_T dbg_conf;
  63   1              uint8_t ret = RET_FAILED;
  64   1      
  65   1              dbg_conf.cmd                    = CMD_TYPE_READ;
  66   1              dbg_conf.dev_addr       = dev_addr;
  67   1              dbg_conf.offset         = offset_addr;   //ÒòÎªÕâ¸ö±äÁ¿ÊÇ16bitµÄ£¬ËùÒÔÒÆÖ²ºó×¢Òâ²»Í¬Ð¾Æ¬´óÐ¡¶ËµÄÎÊÌâ
  68   1              dbg_conf.len                    = len;
  69   1              dbg_conf.page                   = page;
  70   1      
  71   1              i2c_master_write_byte(I2C_DEVICE_ADDR, PAGE_SELECT_BYTE, page);
  72   1              ret = i2c_master_write(I2C_DEVICE_ADDR, DEBUG_CMD_START_ADDR + 1, (uint8_t *)&dbg_conf.dev_addr, sizeof(d
             -bg_conf) - 1);
  73   1      
  74   1              ret = dbg_cmd_conf(CMD_TYPE_READ);
  75   1      
  76   1              if(ret == RET_FAILED)
  77   1              {
  78   2                      return RET_FAILED;
  79   2              }
  80   1      
  81   1              ret = i2c_master_read(I2C_DEVICE_ADDR, DEBUG_CMD_START_ADDR + sizeof(dbg_conf), value, len);
  82   1              return ret;
  83   1      }
  84          
  85          /*
  86           * ¸Ãº¯ÊýÓ¦ÓÃÓÚi2c´ÓÉè±¸¶Ë,ÓÃÓÚi2cÖ÷Éè±¸·ÃÎÊi2c´ÓÉè±¸ÄÚ²¿µÄi2c´ÓÉè±¸
  87           */
  88          uint8_t i2c_pass_through_write(uint8_t dev_addr, uint8_t page,uint16_t offset_addr, uint8_t *value, uint8_
             -t len)
  89          {
  90   1              CONFIG_STRUCT_T dbg_conf;
  91   1              uint8_t ret = RET_FAILED;
  92   1      
  93   1              dbg_conf.cmd       = CMD_TYPE_WRITE;
  94   1              dbg_conf.dev_addr  = dev_addr;
  95   1              dbg_conf.offset    = offset_addr; //ÒòÎªÕâ¸ö±äÁ¿ÊÇ16bitµÄ£¬ËùÒÔÒÆÖ²ºó×¢Òâ²»Í¬Ð¾Æ¬´óÐ¡¶ËµÄÎÊÌâ
  96   1              dbg_conf.len       = len;
  97   1              dbg_conf.page      = page;
  98   1      
  99   1              i2c_master_write_byte(I2C_DEVICE_ADDR, PAGE_SELECT_BYTE, page);
 100   1              ret = i2c_master_write(I2C_DEVICE_ADDR, DEBUG_CMD_START_ADDR + 1, (uint8_t *)&dbg_conf.dev_addr, sizeof(d
             -bg_conf) - 1);
 101   1      
 102   1              ret = i2c_master_write(I2C_DEVICE_ADDR, DEBUG_CMD_START_ADDR + sizeof(dbg_conf), (uint8_t *)value, dbg_co
             -nf.len);
 103   1      
 104   1              ret = dbg_cmd_conf(CMD_TYPE_WRITE);
 105   1      
C51 COMPILER V9.53.0.0   MCU_SAL_DBG_CMD                                                   10/09/2019 13:50:29 PAGE 3   

 106   1              if(ret == RET_FAILED)
 107   1              {
 108   2                      return RET_FAILED;
 109   2              }
 110   1      
 111   1              return ret;
 112   1      }
 113          
 114          /*
 115           * ¸Ãº¯ÊýÓ¦ÓÃÓÚi2c´ÓÉè±¸¶Ë,ÓÃÓÚi2cÖ÷Éè±¸µÄÇëÇóÃüÁîµÄ´¦Àí£¬µ÷ÓÃ¸ñÊ½ÈçÏÂ:
 116           * uint8_t buff[128];
 117           * dbg_cmd_handle((DEBUG_CMD_STRUCT_T *)&buff[OFFSET_INDEX(MSA_PAGE4_DEBUG_CMD)]);
 118           */
 119          void dbg_cmd_handle(DBG_CMD_STRUCT_T *dbg_cmd)
 120          {
 121   1              uint8_t  ret = RET_OK, i = 0;
 122   1      
 123   1              if(dbg_cmd == NULL)
 124   1              {
 125   2                      return;
 126   2              }
 127   1      
 128   1      
 129   1              if (dbg_cmd->config.cmd != CMD_TYPE_IDEL &&
 130   1                      dbg_cmd->config.cmd != RET_OK        &&
 131   1                      dbg_cmd->config.cmd != RET_FAILED)
 132   1              {
 133   2                      switch(dbg_cmd->config.cmd)
 134   2                      {
 135   3                              case CMD_TYPE_READ:  // read
 136   3                              {
 137   4                                      if (dbg_cmd->config.dev_addr == I2C_DEVICE_ADDR)
 138   4                                      {
 139   5                                              switch(dbg_cmd->config.page)
 140   5                                              {
 141   6                                                      default:
 142   6                                                              break;
 143   6                                              }
 144   5                                      }
 145   4                                      else
 146   4                                      {
 147   5                                              ret = i2c_master_read(dbg_cmd->config.dev_addr, dbg_cmd->config.offset, dbg_cmd->buf, dbg_cmd->config
             -.len);
 148   5                                      }
 149   4                                      break;
 150   4                              }
 151   3                              case CMD_TYPE_WRITE:    // write
 152   3                              {
 153   4                                      if (dbg_cmd->config.dev_addr == I2C_DEVICE_ADDR)
 154   4                                      {
 155   5      
 156   5                                      }
 157   4                                      else
 158   4                                      {
 159   5                                              ret = i2c_master_write(dbg_cmd->config.dev_addr, dbg_cmd->config.offset, dbg_cmd->buf, dbg_cmd->confi
             -g.len);
 160   5                                      }
 161   4                                      break;
 162   4                              }
 163   3                              default:
 164   3                                      break;
 165   3                      }
 166   2      
C51 COMPILER V9.53.0.0   MCU_SAL_DBG_CMD                                                   10/09/2019 13:50:29 PAGE 4   

 167   2                      if(ret != RET_FAILED)
 168   2                      {
 169   3                              dbg_cmd->config.cmd = RET_OK;
 170   3                      }
 171   2                      else
 172   2                      {
 173   3                              dbg_cmd->config.cmd = RET_FAILED;
 174   3                      }
 175   2              }
 176   1      }
 177          
 178          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    579    ----
   CONSTANT SIZE    =     52    ----
   XDATA SIZE       =   ----      36
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
